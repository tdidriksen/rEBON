<?xml version="1.0"?>

<project name="parser" default="help">

  <description>
    description: "Eiffel Ant file for BON parser"
    system: "BON parser"
    copyright: "Copyright (c) 2001-2005, Joseph R. Kiniry"
    license: "Eiffel Forum License v2 (see forum.txt)"
    date: "$Date: 2005/12/21 14:18:59 $"
    revision: "$Revision: 1.3 $"
  </description>

  <inherit>
    <parent location="${BON}/src/scanner/build.eant">
      <redefine target="help"/>
      <redefine target="install"/>
      <redefine target="compile"/>
      <redefine target="clean"/>
      <redefine target="clobber"/>
    </parent>
  </inherit>

  <target name="help">
    <echo message="usage:"/>
    <echo message="   geant install"/>
    <echo message="   geant compile"/>
    <echo message="   geant  compile_parsers"/>
    <echo message="   geant clean"/>
    <echo message="   geant clobber"/>
  </target>

  <target name="install">
    <description>Build all parsers.</description>
    <geant target="compile"/>
  </target>

  <target name="compile">
    <description>Build all parsers.</description>
    <geant target="compile_parsers"/>
    <geant target="bon_parser_benchmark"/>
  </target>

  <target name="compile_parsers">
    <!-- add back in ebon_parser depend when it is ready -->
    <description>Build BON and EBON parsers.</description>
    <geant target="parsers"/>
  </target>

  <target name="parsers" depend="compile_scanners">
    <!-- add back in ebon_parser depend when it is ready -->
    <description>Build BON and EBON parsers.</description>
    <geant target="bon_parser"/>
    <geant target="bon_parser_benchmark"/>
  </target>

  <target name="bon_parser" depend="init_system,bon_scanner">
    <description>Build BON parser.</description>
    <!-- Current usage (new_typing and verbose) for Gobo >=3.3. -->
    <geyacc input="${parser_dir}/${bon_parser_root}.y"
            output="${parser_dir}/${bon_parser_root}.e"
            new_typing="true"
            verbose="${parser_dir}/${bon_parser_root}.log"
            tokens="bon_tokens"/>
  </target>

  <target name="ebon_parser" depend="init_system,ebon_scanner">
    <description>Build EBON parser.</description>
    <!-- Current usage (new_typing and verbose) for Gobo >=3.3. -->
    <geyacc input="${parser_dir}/${ebon_parser_root}.y"
            output="${parser_dir}/${ebon_parser_root}.e"
            new_typing="true"
            verbose="${parser_dir}/${bon_parser_root}.log"
            tokens="ebon_tokens"/>
  </target>

  <target name="bon_parser_benchmark" depend="bon_parser">
    <description>Build BON parser benchmark.</description>
    <ise ace="${parser_build_dir}/ise.ace"/>
    <se ace="${parser_build_dir}/se.ace"/>
    <ve ace="${parser_build_dir}/ve.esd"/>
  </target>

  <target name="clean" depend="clean_parser">
    <description>Clean intermediate results.</description>
  </target>

  <target name="clean_parser">
    <description>Clean intermediate results from all parser builds.</description>
    <se clean="bon_parser"/>
    <se clean="ebon_parser"/>
    <ise clean="bon_parser"/>
    <ise clean="ebon_parser"/>
    <ve clean="bon_parser"/>
    <ve clean="ebon_parser"/>
  </target>

  <target name="clobber" depend="realclean_parser">
    <description>Remove all generated files.</description>
  </target>

  <target name="realclean_parser" depend="init_system">
    <description>Clean derived Eiffel build files for parsers.</description>
    <delete file="${bon_parser_root}.e"/>
    <delete file="bon_tokens.e"/>
    <delete file="${bon_parser}"/>
    <delete file="${ebon_parser_root}.e"/>
    <delete file="ebon_tokens.e"/>
    <delete file="${ebon_parser}"/>
    <delete file="ge.ace"/>
    <delete file="ise.ace"/>
    <delete file="se.ace"/>
    <delete file="ve.xace"/>
  </target>    

</project>
